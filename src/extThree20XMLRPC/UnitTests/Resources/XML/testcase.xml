<?xml version="1.0" encoding="UTF-8"?>
<issues type="array">
  <issue>
    <number type="integer">3</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-04-18T08:30:22-07:00</created-at>
    <body>When adding a TTStyledTextTableField to a table view that is grouped, and the field is at the top and/or bottom of a group, the cell is rendered with squared corners instead of rounded corners like all other cells.</body>
    <title>TTStyledTextTableField in a UITableViewStyleGrouped table view does not have rounded corners</title>
    <updated-at type="datetime">2009-09-25T10:55:40-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>elliotb</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
      <label>
        <name>fixavailable</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">5</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-04-19T07:45:54-07:00</created-at>
    <body>Hi Guys, this is my first time creating some issues, so feel free to delete them if they are not appropriate or already fixed... if i can fix these myself or contribute i will do so.

Image scaling in Landscape mode does not 'amplify' pinches as it should. because of the smaller pinch area, a UIImageView amplify's the pinch to give the user more of a chance to zoom in and out.

Currently pinching to zoom in, in landscape mode is troublesome because of the smaller vertical area.</body>
    <title>TTImageView - Landscape pinch amplification as per UIImageView</title>
    <updated-at type="datetime">2009-04-19T07:47:01-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>mdreeling</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
      <label>
        <name>norepro</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">6</number>
    <votes type="integer">4</votes>
    <created-at type="datetime">2009-04-19T07:51:15-07:00</created-at>
    <body>When rotating an image from portrait to landscape, or vice versa, in zoomed mode, the image is rotated in such as way that what you were looking at may not still be centered when the rotation is complete.

For instance, if you are zoomed on the face of the statue of liberty in portrait, when you rotate to landscape, you will be looking at another part of the statue.</body>
    <title>TTImageView - Landscape to Portrait rotation - When zoomed rotates the image Off-Axis</title>
    <updated-at type="datetime">2009-09-24T07:04:45-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>mdreeling</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">15</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-05-04T20:25:24-07:00</created-at>
    <body>Given style XHTML: &quot;&amp;lt;a href=\&quot;#\&quot;&gt;&amp;lt;img class=\&quot;absolutePositioning\&quot;&gt;&amp;lt;/img&gt;&amp;lt;/a&gt;&quot;

If the class uses TTPositionAbsolute, then the link will no longer work. I noticed that TTLayout only considers TTBoxStyle's TTPositionAbsolute for image nodes, so I'm not sure how to work around this.</body>
    <title>TTPositionAbsolute breaks link surrounding an image</title>
    <updated-at type="datetime">2009-12-21T18:45:17-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>searls</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">16</number>
    <votes type="integer">4</votes>
    <created-at type="datetime">2009-05-05T10:55:03-07:00</created-at>
    <body>I would be very usefull to add -initWithCoder: method to TTView class and subclasses to minimally support Interface Builder XIB. Without this method, Three20 views can't be used in XIB definition, because some initialization from -initWithFrame: are missing.

For example: I've added minimal XIB&#160;/ Interface Builder support by adding this method to TTView class:

- (id)initWithCoder:(NSCoder *)decoder {
  if (self = [super initWithCoder:decoder]) {
    _style = nil;
    _layout = nil;
    // Avoid fixing content mode here, because it will be specified in XIB
    //self.contentMode = UIViewContentModeRedraw;
  }
  return self;
}

And by adding this method to TTTabBar class:

- (id)initWithCoder:(NSCoder *)decoder {
  if (self = [super initWithCoder:decoder]) {
    _selectedTabIndex = NSIntegerMax;
    _tabItems = nil;
    _tabViews = [[NSMutableArray alloc] init];
    _tabStyle = nil;
    
    self.style = TTSTYLE(tabBar);
    self.tabStyle = @&quot;tab:&quot;;
  }
  return self;
}

Now with these methods, I can add a view of TTTabBar to my NIB&#160;/ XIB. It shows a blank view in Interface Builder, but it correctly build up at runtime.</body>
    <title>Add -initWithCoder: method to TTView class and subclasses to minimally support Interface Builder XIB</title>
    <updated-at type="datetime">2009-12-08T09:05:51-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>flabrie</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">17</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-05-05T13:35:00-07:00</created-at>
    <body>Just realized while reading TTStyledLayout.m that the CGSize minSize only looks at the height and doesn't access the width, and only does so for TTStyledBlock (meaning div only?).

I'm going to look at modifying this for a span element with a TTBoxStyle and a minimum width. Thoughts?</body>
    <title>TTBoxStyle.minSize only concerns height, not width.</title>
    <updated-at type="datetime">2009-07-23T13:17:36-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>searls</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
      <label>
        <name>fixavailable</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">19</number>
    <votes type="integer">3</votes>
    <created-at type="datetime">2009-05-11T08:08:33-07:00</created-at>
    <body>The TTURLRequestQueue caches results even if the response includes a Cache-Control header indicates the data should not be cached (no-cache, for instance).</body>
    <title>TTURLRequestQueue does not respect Cache-Control header</title>
    <updated-at type="datetime">2009-08-06T18:00:01-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>dougbarth</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">28</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-05-27T09:42:30-07:00</created-at>
    <body>I'm on 3.0 beta 5 and it seems like the TTMessageController doesn't
work properly: I cannot switch the fields by tapping (only the &quot;next&quot;
key works). Seems like something is messed up with touches / events / responders (or whatever ;-)</body>
    <title>TTMessageController / OS 3.0: Cannot switch fields</title>
    <updated-at type="datetime">2009-05-27T09:42:30-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>chrismuc</user>
    <labels type="array">
      <label>
        <name>norepro</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">29</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-05-27T12:09:40-07:00</created-at>
    <body>TTTextEditor needs to overwrite UIResponder *FirstResponder messages.

- (BOOL)isFirstResponder {
  return [_textView isFirstResponder];
}

- (BOOL)canBecomeFirstResponder {
  return [_textView canBecomeFirstResponder];
}

- (BOOL)becomeFirstResponder {
  return [_textView becomeFirstResponder];
}

- (BOOL)resignFirstResponder {
  return [_textView resignFirstResponder];
}
</body>
    <title>TTTextEditor becomeFirstResponder</title>
    <updated-at type="datetime">2009-05-27T12:10:14-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>catlan</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">31</number>
    <votes type="integer">3</votes>
    <created-at type="datetime">2009-05-27T15:04:26-07:00</created-at>
    <body>As it currently stands, TTMessageRecipientField will only add a recipient that's selected from TTMessageController's dataSource. If you try to arbitrarily add a contact, it will delete them from the UITextField once TTMessageRecipientField loses focus.</body>
    <title>TTMessageController - does not allow arbitrary recipient into TTMessageRecipientField</title>
    <updated-at type="datetime">2009-10-21T13:57:47-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>stevef</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">46</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-06-26T13:06:56-07:00</created-at>
    <body>The whole HSB/HSV thing is confusing enough on its own, but it's made even worse by the difference in the hue domain for Three20's HSV color factory and UIKit's HSB factory.

    // Three20 (hue is in [0, 360])
    + (UIColor*)colorWithHue:(CGFloat)h saturation:(CGFloat)s value:(CGFloat)v alpha:(CGFloat)a;

    // UIKit (hue is in [0.0, 1.0])
    + (UIColor *)colorWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness alpha:(CGFloat)alpha

It's made even more confusing because if you look at UIColorAdditions.m in Three20, it uses HSBtoRGB macros (even though the factory method is HSV).

Another point of confusion is Three20's -[UIColor hue] method which returns a value in the range [0.0, 360.0]. So this works with Three20's factory method but not the original UIColor HSB factory method. When 2 things are both called &quot;hue&quot;, I would expect them to have the same domain.

Unless there's a really good reason for this, I would rather that UIColorAdditions.m more closely follows UIKit's HSB system.</body>
    <title>The hue in UIColorAdditions is in range [0, 360], while UIKit's hue is [0, 1]</title>
    <updated-at type="datetime">2009-08-13T04:19:47-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>klazuka</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">47</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-06-26T13:32:21-07:00</created-at>
    <body>I'm sure that is not a good title, but it takes a bit to explain.

I have a TTTableView.  In the header is a TTTabBar.  When tabs are selected, I invalidate the view and thus createDataSource gets called and it creates a different data source for each tab.

The first data source is a TTListDataSource where the items are TTStyledTextTableItems.  Then if you select the second tab, you get a different TTListDataSource where the items are just TTTableItems.  Everything is fine at this point.  But when you select the first tab again, it draws the TTStyledTextLabels incorrectly...they are about one character wide.

After a long time in the debugger, I figured out that on return, it wasn't calling layoutSubviews on the TTStyledTextLabels.  I fixed this by adding [_label layoutSubviews] in TTStyledTextTableItemCell.  Here is the full method:

    - (void)layoutSubviews {
      [super layoutSubviews];

      TTStyledTextTableItem* field = self.object;
      _label.frame = CGRectOffset(self.contentView.bounds, field.margin.left, field.margin.top);
      [_label layoutSubviews];
    }

If this isn't a bug, please let me know what I should be doing instead.  Thanks!</body>
    <title>(fix included):  TTTableView switch from TTStyledTextTableItemCell to TTTableItemCell and back...needs layoutSubviews</title>
    <updated-at type="datetime">2009-06-26T13:33:14-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>patrickxb</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
      <label>
        <name>fixavailable</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">48</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-06-27T16:10:19-07:00</created-at>
    <body>TTMessageController doesn't currently support a field where the user can choose what account or address they'd like to send the message from (similar to Mail.app if there are multiple email accounts setup). It also doesn't currently support a separate data source for those accounts/addresses. Therefore, simply adding a &quot;From:&quot; field doesn't easily fix this, as that field would use the same data source as the recipients (as well as having the same behavior as a recipient field, which is incorrect).

I'd really like to see this functionality added.</body>
    <title>Request for sender field in TTMessageController</title>
    <updated-at type="datetime">2009-06-27T16:11:26-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>hjon</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">51</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-07-10T07:58:00-07:00</created-at>
    <body>TTLayout could be made more useful by changing the forView:(UIView*) part of the selector to forSize:(CGSize).

Right now the UIView* type is too-specific. Both TTFlowLayout and TTGridLayout only depend on the &quot;width&quot; property of the view parameter.

In fact, even the word &quot;Subviews&quot; is too specific. I would prefer if the method had the following signature:
    - (CGSize)layoutViews:(NSArray *)view desiredSize:(CGSize)desiredSize;
</body>
    <title>-[TTLayout layoutSubviews:forView:] is too specific</title>
    <updated-at type="datetime">2009-07-11T06:24:51-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>klazuka</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">55</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-07-20T18:19:14-07:00</created-at>
    <body>For a TTTextEditor added to the dataSource at an offscreen index. This is done after initial load through a method in the respective TTViewController.

[TTTextEditor.textView becomeFirstResponder] doest not bring up the keyboard. When scrolling to this location, an obj_msgSend ccrash occurs where GDB logs &quot;Program received signal: &quot;EXC_BAD_ACCESS&quot;.
</body>
    <title>Offscreen TTTextEditor becomeFirstResponder crashes</title>
    <updated-at type="datetime">2009-12-09T15:45:13-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>grinich</user>
    <labels type="array">
      <label>
        <name>crash</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">57</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-07-26T06:45:32-07:00</created-at>
    <body>Suppose that the default placeholder image is 70x70 and your table row height is 80px (variableHeightRows = NO, although even if you set this to YES, the bug would still exist). Next suppose that the TTTableImageItemCell is configured to display an image url for an image that is, say, 100x200 and is *not* in the image cache.

When the TTTableImageItemCell does layoutSubviews for the first time, it will check to see if the image URL is in the cache. In this case, the image is not in the cache, so it will do the layout based on the dimensions of the placeholder image (70x70 in this example).

Shortly thereafter the TTImageView displays the placeholder image while it sends out an HTTP request for the image resource. At this point the layout is good: the placeholder image fits nicely into the cell. Then, after the image is retrieved from the internet, the image is downsampled to fit inside the existing TTTableImageItemCell frame (70x70 because of the initial placeholder image). At this point, everything is still fine.

Now scroll the cell off the screen a few rows and then scroll back to the cell. A new cell will be dequeued and set to display the image URL, but *this time* it finds the image in the cache, and follows a different code path through layoutSubviews. The end result is that the TTImageView's frame is now changed to match the dimensions of the cached image (100x200 in this example), and the end result is that the image overflows the cell layout.

You can see this problem in my TTRemoteExamples table view. You can verify that the image cache code path in layoutSubviews is the root of the problem by disabling the image cache in TTRemoteExamples (AppDelegate.m sets the cache's maxPixelCount to a farily large number right now).

As far as I can tell, the correct behavior would be for -[TTTableImageItemCell layoutSubviews] to always set the frame of its TTImageView either to the default placeholder image (if available) or to the default dimensions for the cell. Which is to say that it should *not* set the TTImageView's frame to match the downloaded image's frame because the downloaded image might be too large, and it is better to just downsample it to fit in the row).

I would fix the bug myself but it seems more like a policy decision that you would be better equiped to decide.
</body>
    <title>TTTableImageItemCell layout overflow</title>
    <updated-at type="datetime">2009-12-21T18:49:31-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>klazuka</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">59</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-07-27T05:30:11-07:00</created-at>
    <body>After these changes:
http://github.com/joehewitt/three20/commit/992ff5f9a76478c04fe2992ae7a2b092bbe3161c

When the keyboard appears in a window which contains a tab bar, the size of the entire keyboard is subtracted from the view. In reality, the view should only shrink to clear the part of the keyboard which appears above the tabstrip.</body>
    <title>Keyboard resizing broken with tab controller</title>
    <updated-at type="datetime">2009-08-19T02:15:05-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>ZoneMR</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">60</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-07-27T13:02:44-07:00</created-at>
    <body>If i'm zoomed in on a photo in the TTPhotoViewController i've noticed
it takes quite a bit of effort to move to the next page.  It seems
much more resistive than the iPhone's actual photo viewer.
Could this be tweaked a bit?
Thanks!</body>
    <title>Resistance in TTPhotoViewController when zoomed in seems too high Options </title>
    <updated-at type="datetime">2009-10-06T02:13:19-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>Metasyntactic</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">61</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-07-27T13:05:12-07:00</created-at>
    <body>Hi all,
When i use the TTPhotoViewController to look at a large image, i am
able to zoom in and pan around successfully.  However, if i rotate the
device, i notice that the image rotates but i *can't* pan entirely to
the top or bottom anymore.
Is this a known issue?
I can supply a repro if that would be helpful.</body>
    <title>TTPhotoViewController seems to have a problem zooming in *and* rotating</title>
    <updated-at type="datetime">2009-08-02T13:18:17-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>Metasyntactic</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">62</number>
    <votes type="integer">-1</votes>
    <created-at type="datetime">2009-07-27T13:06:37-07:00</created-at>
    <body>In the normal iphone photo viewer you can flick a zoomed in image and
it will fly across the screen and bounce.  This doesn't seem to eb the
case with TTPhotoViewController.  When i zoom in and i flick, it seems
to stop immediately after releasing my touch.
Cheers!</body>
    <title>Flicking when zoomed in in a TTPhotoViewController doesn't seem to decelerate the image</title>
    <updated-at type="datetime">2009-10-28T15:53:14-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>Metasyntactic</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">63</number>
    <votes type="integer">4</votes>
    <created-at type="datetime">2009-07-30T22:10:12-07:00</created-at>
    <body>if the text passed to TTStyledTextLabel contains special characters like &amp;rsqou; &amp;lsqou then no text is rendered in the label and it is shown as blank.</body>
    <title>TTStyledTextLabel does not support html special characters </title>
    <updated-at type="datetime">2009-09-25T10:55:36-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>saurwad</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">65</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-07-31T14:11:26-07:00</created-at>
    <body>Currently setSelectedTabIndex only calls the delegates tabSelected method if the new tab index is different from the current index.

When explicilty setting the index it's likely the delegate is expecting to update something based on the selected index.  On tab initialization, the default selected tab is 0, so if other initialization code determines the start tab to be 0, the delegate is never called.

I'm lazy and would like to rely on the delegate.tabSelected method to tell me what content I need to load, rather than having to check to see if tab 0 is selected and needs to be loaded.

Proposed new setSelectedTabIndex ...

- (void)setSelectedTabIndex:(NSInteger)index {
  if (index != _selectedTabIndex) {
    if (_selectedTabIndex != NSIntegerMax) {
      self.selectedTabView.selected = NO;
    }

    _selectedTabIndex = index;

    if (_selectedTabIndex != NSIntegerMax) {
      self.selectedTabView.selected = YES;
    }
  }

  if ([_delegate respondsToSelector:@selector(tabBar:tabSelected:)]) {
  [_delegate tabBar:self tabSelected:_selectedTabIndex];
  }
}
</body>
    <title>suggest moving TTTabBar setSelectedTabIndex delegate call out of if statement</title>
    <updated-at type="datetime">2009-08-03T19:10:58-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>lrx007</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
      <label>
        <name>fixavailable</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">69</number>
    <votes type="integer">3</votes>
    <created-at type="datetime">2009-08-04T20:47:18-07:00</created-at>
    <body>I'm using TTTableStyledTextItem in a TTTableViewController, initializing them with itemWithText:[TTStyledText textFromXHTML:body] like it does in the catalog.  Unfortunately, with some combinations of copy the text gets wonky and doesn't display properly, taking out numbers and lines.

For instance, try adding this to the TTCatalog's StyledTextTableTestController around lines 17-27:
      [TTStyledText textFromXHTML:@&quot;bold? If there are several lines above, then some weird stuff happens below with line breaks!  Weird!  Like an event.\n\nCoffeehouse and Lounge\n\n200 E Main St\n555-222-2323&quot;],

Now compare to this:
      [TTStyledText textFromXHTML:@&quot;&lt;b&gt;bold?&lt;/b&gt; If there are several lines above, then some weird stuff happens below with line breaks!  Weird!  Like an event.\n\nCoffeehouse and Lounge\n\n200 E Main St\n555-222-2323&quot;],

The first one displays properly, but the second one displays strangely.</body>
    <title>TTStyledText -- Trouble with newlines after bold/italic/span elements</title>
    <updated-at type="datetime">2009-08-21T18:46:04-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>ianterrell</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">71</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-08-07T13:28:27-07:00</created-at>
    <body>There may be more locations that colors are wrong, but these are the locations I've found.

In TTWebController when initializing the toolbar tintColor it should be toolbarTintColor and not navigationBarTintColor.

In TTDefaultStyleSheet methods toolbarButton, toolbarBackButton, toolbarForwardButton, and toolbarRoundButton are using navigationBarTintColor and need to be toolbarTintColor.</body>
    <title>navigationBarTintColor and toolbarTintColor issues for TTDefaultSheet and TTWebController</title>
    <updated-at type="datetime">2009-08-07T13:28:27-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>mpurland</user>
    <labels type="array">
      <label>
        <name>fixavailable</name>
      </label>
      <label>
        <name>minor</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">72</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-08-11T13:49:00-07:00</created-at>
    <body>I realize that the intention of the URL loading system in Three20 is geared at network resources, but it would be nice if, for testing purposes if nothing else, it were possible to use file URLs as well. The immediate failure seems to be in `TTRequestLoader`'s method `-connection:didReceiveResponse:`, which assumes (contrary to the documentation) that the response it receives will necessarily be an `NSHTTPURLResponse`, rather than the more general `NSURLResponse`.

Replacing a couple of methods in TTRequestLoader will allow loading of files:

    - (void)connection:(NSURLConnection*)connection didReceiveResponse:(NSURLResponse*)response {
      _response = [response retain];
      long long contentLength = NSURLResponseUnknownLength;

      if ([response isKindOfClass:[NSHTTPURLResponse class]]) {
        NSDictionary* headers = [(NSHTTPURLResponse*)response allHeaderFields];
        contentLength = [[headers objectForKey:@&quot;Content-Length&quot;] intValue];
      }
      else {
        contentLength = [response expectedContentLength];
      }

      if (contentLength &gt; _queue.maxContentLength &amp;&amp; _queue.maxContentLength) {
        TTLOG(@&quot;MAX CONTENT LENGTH EXCEEDED (%d) %@&quot;, contentLength, _URL);
        [self cancel];
      }
      else if (contentLength == NSURLResponseUnknownLength) {
        contentLength = 0;
      }

      _responseData = [[NSMutableData alloc] initWithCapacity:contentLength];
    }

and

    - (void)connectionDidFinishLoading:(NSURLConnection *)connection {
      TTNetworkRequestStopped();

      if (![_response isKindOfClass:[NSHTTPURLResponse class]] &amp;&amp; _response.statusCode == 200) {
        [_queue performSelector:@selector(loader:didLoadResponse:data:) withObject:self
          withObject:_response withObject:_responseData];
      } else {
        TTLOG(@&quot;  FAILED LOADING (%d) %@&quot;, _response.statusCode, _URL);
        NSError* error = [NSError errorWithDomain:NSURLErrorDomain code:_response.statusCode
          userInfo:nil];
        [_queue performSelector:@selector(loader:didFailLoadWithError:) withObject:self
          withObject:error];
      }

      TT_RELEASE_SAFELY(_responseData);
      TT_RELEASE_SAFELY(_connection);
    }

</body>
    <title>TTURLRequest doesn't work with file URLs</title>
    <updated-at type="datetime">2009-08-11T15:05:03-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>sixten</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
      <label>
        <name>fixavailable</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">73</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-08-12T14:39:47-07:00</created-at>
    <body>Currently, I don't seem to be able to style the background of a UITableViewCell, because the native UILabel of the UITableViewCell being used by TTTableViewCell and all its derivatives doesn't allow for a transparent / non-opaque background.
For example, if you want a gradient background on a cell, the background of the label portion of the content view will always be white.

I would be happy to contribute this change, as I have the modification working here were TTTableLinkedItemCell has a new property _contentLabel who's background can be set to transparent if using a cell background.

Let me know if I'm otherwise missing something!
Thanks
</body>
    <title>Request: Custom UILabel for TTTableLinkedItemCell or TTTableViewCell</title>
    <updated-at type="datetime">2009-08-12T14:39:47-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>dshanley</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">74</number>
    <votes type="integer">3</votes>
    <created-at type="datetime">2009-08-12T18:09:06-07:00</created-at>
    <body>If there are more than 5 controllers in your Tab Bar, the SDK automatically gives you a &quot;More...&quot; view to display your extra controllers.  If your controller is in the &quot;More...&quot; section then additional URLs are not properly opened.

For example, I added a food item #1 to the TTNavigatorDemo's TabBarController.m implementation:

    - (void)viewDidLoad {
      [self setTabURLs:[NSArray arrayWithObjects:@&quot;tt://menu/1&quot;,
                                             @&quot;tt://menu/2&quot;,
                                             @&quot;tt://menu/3&quot;,
                                             @&quot;tt://menu/4&quot;,
                                             @&quot;tt://menu/5&quot;,
                                             @&quot;tt://food/1&quot;,
                                             nil]];
    }

The exact behavior depends on the specific controllers used.  TTWebController URLs are broken, notably.  Here is a screencast of poor behavior:  http://screencast.com/t/9QWyoW9u</body>
    <title>TTNavigator is broken for &quot;More...&quot; controllers in Tab Bar</title>
    <updated-at type="datetime">2009-12-19T06:17:34-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>ianterrell</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
      <label>
        <name>fixavailable</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">76</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-08-17T10:35:46-07:00</created-at>
    <body>In [TTPhotoViewController updateChrome], UIView.title is set to a photo-specific value. This is bad when the TTPhotoViewController is displayed within a UITabBarController, which uses UIView.title in the tabBarItem.

Suggest use of a separate photoTitle field within TTPhotoViewController.</body>
    <title>TTPhotoViewController shouldn't set UIView.title for each photo</title>
    <updated-at type="datetime">2009-08-17T10:35:47-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>eelnhoj</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">77</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-08-25T22:15:27-07:00</created-at>
    <body>I'm trying to remove an image from memory, cached by TTImageView, and then reload it from server (as the image changes at user's choice). However, they aren't getting off the dict in memory. I tried inspecting _imageCache dictionary and the URL was never removed from it.

A bug? Or I'm missing something?

      // Doesn't work; File is not removed from memory with this:
      [[TTURLCache sharedCache] invalidateURL:picturePath];


      // With this one, file is removed from disk, but not from memory again.
      // Data is refreshed only when app reloads.
      [[TTURLCache sharedCache] removeURL:picturePath fromDisk:YES];</body>
    <title>Not able to remove TTURLCache from memory</title>
    <updated-at type="datetime">2009-09-23T07:10:43-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>Gurpartap</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">79</number>
    <votes type="integer">2</votes>
    <created-at type="datetime">2009-08-31T02:09:44-07:00</created-at>
    <body>Hi, some of my frinds told me, they could not show left and right overflow view in TTTabStrip.

So, I do some work on it, and finally, I notice some changes between the newest version and branch 96e685b1c23ca2a90a2d26a329da79c60eafaa43 (which one is support 2.x OS).

The difference has been found at the method - (CGSize)addToSize:(CGSize)size context:(TTStyleContext*)context of TTImageStyle in TTStyle.m.

In the old branch, the code is
&lt;pre&gt;else if (_contentMode != UIViewContentModeScaleToFill
             &amp;&amp; _contentMode != UIViewContentModeScaleAspectFill
             &amp;&amp; _contentMode != UIViewContentModeScaleAspectFit)&lt;/pre&gt;

and the newest one is
&lt;pre&gt;else if (_contentMode == UIViewContentModeScaleToFill)&lt;/pre&gt;

and the default value of contentMode is UIViewContentModeScaleToFill. So, the size of TTImageStyle is not include the size of image.

I don't know why you change the condition here, so I add one sentence set the contentMode to another one when TTTabStrip create the overflowRight and overflowLeft objects.

The added sentence like:
&lt;pre&gt;[(TTImageStyle *)_overflowRight.style setContentMode:UIViewContentModeCenter];&lt;/pre&gt;

That's all. Sorry for my poor English</body>
    <title>left and right overflow view missed in TTTabStrip.</title>
    <updated-at type="datetime">2009-11-18T15:08:51-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>Transparentmask</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">80</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-08-31T07:26:44-07:00</created-at>
    <body>I upgraded to latest version of three20 and found out that deviceOrientationDidChange is commented out in TTScrollView.m.
My TTScrollView stopped adjusting to landscape-view.
Uncommenting these rows made everything work again.

Should this method be commented out or is it a bug?
</body>
    <title>TTScrollView.m deviceOrientationDidChange commented out</title>
    <updated-at type="datetime">2009-08-31T07:26:44-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>jakeri</user>
    <labels type="array"/>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">81</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-09-04T12:05:09-07:00</created-at>
    <body>Previously I'd been using the following method to delete rows from tables. I don't see anything similar in the Three20 classes and the method below won't even get called.

    - (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
      //do work 
    }</body>
    <title>Unable to delete rows/cells from table</title>
    <updated-at type="datetime">2009-12-21T18:50:08-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>lhackett</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">86</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-09-21T14:18:30-07:00</created-at>
    <body>The line breaks still aren't working properly for long links. The link is truncated (usually at the /), but space is still allocated for the wrapped portion of the link. If you touch down on the link, the wrapped area is highlighted, but there is no text in it.

  CGRect screenBounds = [[UIScreen mainScreen] bounds];
  [self setWindow:[[[UIWindow alloc] initWithFrame:screenBounds] autorelease]];

  UIView *v = [UIView instantiate];
  [v setFrame:[window frame]];
  [v setBackgroundColor:[UIColor whiteColor]];
  [window addSubview:v];

  TTStyledTextLabel *label = [[[TTStyledTextLabel alloc] initWithFrame:CGRectZero] autorelease];
  [label setBackgroundColor:[UIColor colorWithWhite:.9 alpha:1.0]];
  [label setWidth:320];

  [label setContentInset:UIEdgeInsetsMake(4, 4, 4, 4)];

  NSString *xhtml = @&quot;Long links get truncated: http://foo.com/ajdsajdhasjdhasjhsdhasdhasdlkahsdkhaslkdshdklashdkashdksah&quot;;
  [label setText:[TTStyledText textFromXHTML:xhtml lineBreaks:YES URLs:YES]];
  [label sizeToFit];
  [v addSubview:label];

  CGRect labelBounds = [label bounds];
  [label setFrame:CGRectMake(0, screenBounds.size.height / 2 - labelBounds.size.height / 2, labelBounds.size.width, labelBounds.size.height)];

  [window makeKeyAndVisible];</body>
    <title>Long links don't wrap properly in TTStyledTextLabels</title>
    <updated-at type="datetime">2009-09-21T14:52:05-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>richcollins</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">87</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-09-21T19:32:34-07:00</created-at>
    <body>Consider a TTStyledTextLabel containing the following XHTML snippet: `Word1 Word2 Word3 Word4 Word5 &lt;b&gt;Word6 Word7&lt;/b&gt; Word8 Word9 Word10`.

If that line wraps in such a way as to produce something like the following:

&gt; Word1 Word2 Word3 Word4  
&gt; Word5 &lt;b&gt;Word6 Word7&lt;/b&gt; Word8  
&gt; Word9 Word10

then Word5 is raised above the baseline by the height of the descender element of the font face.

Proposed Patch:
    ---
     src/TTStyledLayout.m |    8 +++++++-
     1 files changed, 7 insertions(+), 1 deletions(-)
    
    diff --git a/src/TTStyledLayout.m b/src/TTStyledLayout.m
    index 0b42e8a..f52250b 100644
    --- a/src/TTStyledLayout.m
    +++ b/src/TTStyledLayout.m
    @@ -218,7 +218,13 @@
           // XXXjoe Support top, bottom, and center alignment also
           if (frame.height &lt; _lineHeight) {
             UIFont* font = frame.font ? frame.font : _font;
    -        [self offsetFrame:frame by:(_lineHeight - (frame.height - font.descender))];
    +        CGFloat adjustmentOffset = _lineHeight - frame.height;
    +
    +        // Text frame heights already include the descender
    +        if (![frame isKindOfClass:[TTStyledTextFrame class]]) {
    +          adjustmentOffset += font.descender;
    +        }
    +        [self offsetFrame:frame by:adjustmentOffset];
           }
           frame = frame.nextFrame;
         }
    --</body>
    <title>TTStyledLayout adds descender height in breakLine method to height of TTStyledTextFrames which already include descender height</title>
    <updated-at type="datetime">2009-09-21T19:35:55-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>eakret</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
      <label>
        <name>fixavailable</name>
      </label>
      <label>
        <name>norepro</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">89</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-09-24T07:34:00-07:00</created-at>
    <body>The removeURL is converting the specified URL into a key and using that key to remove the cache info. The problem is that the cached images are stored by their URL and not the URL KEY. So, I added the two line of code below to address this issue. I'm not sure what uses the URL KEY, so I just added the lines, not changing anything else.

[_imageSortedList removeObject:URL];
[_imageCache removeObjectForKey:URL];</body>
    <title>TTURLCache removeURL not removing</title>
    <updated-at type="datetime">2009-09-24T07:34:00-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>ItaloFSS</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
      <label>
        <name>fixavailable</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">90</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-10-01T06:40:53-07:00</created-at>
    <body>Given the asynchronous nature of (remote) image loading any TTTableMessageItemCell cells that are reused display the 'old' (reused) image until the new image loads. This is confusing (especially on a slow link where images take a while to load.)

This resolves it here, but I think there maybe be need to do this for a number of different cells (i.e. I've not traced every one through to see if they have similar issues.)

- (void)prepareForReuse {
  [super prepareForReuse];

  _imageView2.image = nil;
}
</body>
    <title>Cell Re-ue Cleanup</title>
    <updated-at type="datetime">2009-11-17T17:32:31-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>adamjack</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">91</number>
    <votes type="integer">1</votes>
    <created-at type="datetime">2009-10-04T10:02:29-07:00</created-at>
    <body>TTImageStyle return always a CGSizeZero with default UIViewContentModeScaleToFill.

Fix this, replacing (TTStyle.m, line 786):
_contentMode != UIViewContentModeScaleToFill
by :
_contentMode == UIViewContentModeScaleToFill </body>
    <title>TTImageStyle and default currentMode</title>
    <updated-at type="datetime">2009-10-04T10:04:17-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>Brindavoine</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
      <label>
        <name>fixavailable</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">94</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-10-16T10:57:49-07:00</created-at>
    <body>assume you have a controller that derives from TTTableViewController
assume you have a datasource that derives from TTListDataSource
and assume you added a TTTableMoreButton on your datasource to add more items (at the bottom of the table) using - (id)tableView:(UITableView*)tableView objectForRowAtIndexPath:(NSIndexPath*)indexPath;


The goal is to catch the user selection on the controller.
According to the Three20 source code you should override this on your controller.
- (void)didSelectObject:(id)object atIndexPath:(NSIndexPath*)indexPath;

it is impossible to catch the click on a number of situations mainly when the user clicks the TTTableMoreButton button.

The problem is that the default delegate identifies that you clicked on the TTTableMoreButton button and calls the model to load more items. when the model loads the datasource is being populated with more items and the cell is no longer of type TTTableMoreButton.

IMHO the call to   [_controller didSelectObject:object atIndexPath:indexPath];
in - (void)tableView:(UITableView*)tableView didSelectRowAtIndexPath:(NSIndexPath*)indexPath;  on TTTableViewDelegate happens too late.

what happens when you try to investigate the cell that was clicked is that you get your own content cell (depends on what you used to populate the table).
Any ideas how I can simply identify what kind of cell was clicked without implementing a custom TTTableViewDelegate ?



</body>
    <title>TTTableViewDelegate call to   [_controller didSelectObject:object atIndexPath:indexPath]; creates an impossible situation to catch - (void)didSelectObject:(id)object atIndexPath:(NSIndexPath*)indexPath </title>
    <updated-at type="datetime">2009-10-16T10:57:49-07:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>yosit</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">96</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-10-29T02:19:09-07:00</created-at>
    <body>I have an iPhone app with a Tab Bar Controller as the main interface.  Some tabs uses  TTTableViewController.  I've observed that if I receive a MEMORY WARNING, the table views disappears.  I saw a closed issue of the same problem, but that was closed 3 months ago.  I'm seeing this problem using the current code (dated Oct 28, 2009).

Any suggestions?</body>
    <title>Empty table views after memory warning (Oct 17 2009 code)</title>
    <updated-at type="datetime">2009-11-17T17:51:55-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>fjtdichosa</user>
    <labels type="array">
      <label>
        <name>norepro</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">97</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-11-01T09:01:36-08:00</created-at>
    <body>I have a view that displays a bunch of views in a gridlayout. 1 view is a TTImageView.

I am having a weird issue with only the imageView appearing on first request. Once it has been cached, I never see it again?

Other issues im experiencing:

* GridLayout is not accounting for the size of the image (guessing since its not loaded yet but i never even see my default image)
* TTImageView is never respecting the frame i gave it. I told it to NOT autoresize to the image size.

I'm thinking im doing something wrong so maybe someone can point me to something?</body>
    <title>TTImageView + TTGridLayout</title>
    <updated-at type="datetime">2009-11-01T09:01:36-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>stevemckenzie</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
      <label>
        <name>norepro</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">101</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-11-07T03:08:06-08:00</created-at>
    <body>I was just wondering if anyone had and plans to do this. It seems like it should be relatively straightforward to implement or is there some other issue i am not aware of. Cheers.
 </body>
    <title>UITextAlignment not implemented on TTStyledTextLabel</title>
    <updated-at type="datetime">2009-11-07T03:08:06-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>bogorman</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">102</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-11-08T05:03:05-08:00</created-at>
    <body>TTLauncherItem.h is missing a newline from the end of the file. This causes a compiler warning if GCC_WARN_ABOUT_MISSING_NEWLINE is turned on, and a compiler error if warnings are being treated as errors.</body>
    <title>TTLauncherItem.h needs newline at end (GCC_WARN_ABOUT_MISSING_NEWLINE)</title>
    <updated-at type="datetime">2009-11-08T05:03:16-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>tewha</user>
    <labels type="array">
      <label>
        <name>minor</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">103</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-11-08T13:52:45-08:00</created-at>
    <body>When the bannerView gets added to the overlayView the overlayView's frame is set to the full size of the tableView.  The frame then gets passed on to the tableBannerView making the tableBannerView be full screen when it should only be 22 pixels high.</body>
    <title>setTableBannerView:animated: frame gets set to the overlayView's frame</title>
    <updated-at type="datetime">2009-11-08T13:52:45-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>uprise78</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">105</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-11-20T14:03:30-08:00</created-at>
    <body>Developers at RogueSheep have stated an app was rejected for calling previousViewController, even though three20's implementation does not appear to be making private calls. It just happens to have the same name as a private SDK call. I posted about this issue here:

http://groups.google.com/group/three20/browse_thread/thread/bcae33d8108ea573

Here is RogueSheep's original post:

http://blog.roguesheep.com/2009/11/19/warning-love-hurts/

What is the opinion on this issue?

Thanks,
Matt</body>
    <title>previousViewController overwriting private SDK call?</title>
    <updated-at type="datetime">2009-11-20T18:23:52-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>eastmedia</user>
    <labels type="array">
      <label>
        <name>privateapi</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">111</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-11-30T06:35:58-08:00</created-at>
    <body>The category UIViewAdditions accesses the private API of the UIView class, causing Apple to reject apps using Three20</body>
    <title>Three20 accessing private variables of UIView</title>
    <updated-at type="datetime">2009-12-07T15:12:31-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>nduplessis</user>
    <labels type="array">
      <label>
        <name>privateapi</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">113</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-12-06T16:46:10-08:00</created-at>
    <body>This creates a nasty redirect loop every time you open the app.  persistState: should be changed to check for if the URL is &quot;about:blank&quot;, which gets set just before openURL: is called on the app delegate.

- (BOOL)persistView:(NSMutableDictionary*)state {
  NSString* URL = self.URL.absoluteString;
  if (URL.length &amp;&amp; ![URL isEqualToString:@&quot;about:blank&quot;]) {
    [state setObject:URL forKey:@&quot;URL&quot;];
    return YES;
  } else {
    return NO;
  }
}</body>
    <title>TTWebController should not persist itself when it loads an external URL</title>
    <updated-at type="datetime">2009-12-07T15:38:21-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>uprise78</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
      <label>
        <name>fixavailable</name>
      </label>
      <label>
        <name>norepro</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">115</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-12-15T07:31:21-08:00</created-at>
    <body>Creating complex custom table view cell subclasses is hard when it should be possible to insert them into regular and grouped table views, as portions of the view just seem to get cut of and the size of the frame is not correctly set.

It would be a nice addition to Three20 if the TTTableViewDataSource, which knows if the table view is in a grouped mode, would set a flag on TTTableViewCell if it is in a grouped table view.

We could then fetch this flag in layoutSubviews and adjust to grouped table view mode.</body>
    <title>TTTableViewCell should have a flag if it is in a grouped table view</title>
    <updated-at type="datetime">2009-12-15T09:14:34-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>SaschaKonietzke</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">116</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-12-15T23:56:13-08:00</created-at>
    <body>The document of UIViewController says &quot;initWithNibName:bundle: is the designated initializer.

// The designated initializer. If you subclass UIViewController, you must call the super implementation of this method, even if you aren't using a NIB.

But TTViewController has its init and does not call super's initWithNibName:bundle:. I think this is design error. Actually I have trouble with subclassing TTViewController, which supply its Nib name on its init method.

</body>
    <title>TTViewController and UIViewController's designated initializer</title>
    <updated-at type="datetime">2009-12-15T23:56:13-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>basuke</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
      <label>
        <name>fixavailable</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">117</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-12-16T19:44:24-08:00</created-at>
    <body>TTStyleText objects seem to ignore their parent frame when calculating where to draw the text. This causes problems when using autoresizesToFit, as the font size calculation is then incorrect.

Reproduce this with the following TTStyleText object:

        textStyle = [TTTextStyle styleWithFont:[UIFont boldSystemFontOfSize:18]
                                 color:[UIColor whiteColor]
                                 minimumFontSize: 12
                                 shadowColor:nil
                                 shadowOffset:CGSizeZero
                                 textAlignment:UITextAlignmentCenter
                                 verticalAlignment:UIControlContentVerticalAlignmentCenter
                                 lineBreakMode:UILineBreakModeTailTruncation
                                 numberOfLines:1 next:nil];</body>
    <title>Centered, autoresizesToFit TTStyleText not respecting frame bounds</title>
    <updated-at type="datetime">2009-12-16T19:44:24-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>jverkoey</user>
    <labels type="array">
      <label>
        <name>bug</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
  <issue>
    <number type="integer">118</number>
    <votes type="integer">0</votes>
    <created-at type="datetime">2009-12-17T08:10:01-08:00</created-at>
    <body>A disk cache is nice, but I can't see ETag or Last-Modified mentioned in the code?</body>
    <title>TTURLRequest doesn't appear to support conditional GET?</title>
    <updated-at type="datetime">2009-12-17T08:10:01-08:00</updated-at>
    <closed-at nil="true"></closed-at>
    <user>jabley</user>
    <labels type="array">
      <label>
        <name>featurerequest</name>
      </label>
    </labels>
    <state>open</state>
  </issue>
</issues>

